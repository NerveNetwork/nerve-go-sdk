/*
 *  MIT License
 *  Copyright (c) 2019-2020 niels.wang
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 *
 */

// @Title
// @Description
// @Author  Niels  2020/3/26
package txprotocal

import (
	"encoding/hex"
	"testing"
)

func TestBlock(t *testing.T) {
	blockHex := "b0932a71b19620edb278f28c21a737e69b09bacba06bb6b3d7d2a17086b63c1f4e5b35330c9a4d0a37a286274c2487792d2d0db12bf9f39c117139f8bb83cd989250055ee2ea0d00030000005cc42b00006b00984f055e190003000300500a0020a526246f8f840432073af3eeea862b1dbbea0a7a487418818081b154db3218cadb0f616746a16f74d7a2cdee819a4aabe79d041f4f5c062eae07ab5488db1b930b64e91bd8c45cfc2103402b727788bc6bdcb53994fba3f3608fded06ed27af08acfbb1b5f1680f317c4463044022029fd8672041b193276b6d9dafa9e13de4cd0127392ad54f2f26beffa3e84ad110220062e9bccc37cc611559db88c573756f3789326496a144c6acf70c5320264d25001009250055e0000fdba03000e170100015d161c7ab259220d325839a9e5d128fae7222ba50100010036cd2000000000000000000000000000000000000000000000000000000000000000000000000000170100016e362f5c9581858ccc8352f064bc1067abdd5a74010001005b2e970000000000000000000000000000000000000000000000000000000000000000000000000017010001159009fe2b32b67092423cd2a4e8426dffa0d4af0100010019c96600000000000000000000000000000000000000000000000000000000000000000000000000170100014ce612e25e3168437e39ade697e51a9683476dae01000100260f350000000000000000000000000000000000000000000000000000000000000000000000000017010001d3532544a5b2c1644e5c999f4dde7fec066617b7010001007cea25030000000000000000000000000000000000000000000000000000000000000000000000001701000138e270321862bfeac3d9ab9359e6b351aeeadd7b0100010093fe0b0000000000000000000000000000000000000000000000000000000000000000000000000017010001371152d8f0b7acd2619bd0f313ac36469389990301000100ac610b00000000000000000000000000000000000000000000000000000000000000000000000000170100010d484d71a1917eced025fbfbb6f1c5427fca281c01000100bff2e4010000000000000000000000000000000000000000000000000000000000000000000000001701000169e4b6984363cc7b4b63cad99518112a84f770bb0100010060e838000000000000000000000000000000000000000000000000000000000000000000000000001701000152261b75d74ae091acb878abb8a99901c8ef60230100010005eb0c00000000000000000000000000000000000000000000000000000000000000000000000000170100013894326b28a56c8235728c7aa157296cba74d20e0100010012b237000000000000000000000000000000000000000000000000000000000000000000000000001701000144aa6c2b26f7d982968b985cd5f5a139fce3d2a0010001004b6b180000000000000000000000000000000000000000000000000000000000000000000000000017010001f0ec22fbbb892e1b08d3b52755cbccafba068c8f01000100ac610b00000000000000000000000000000000000000000000000000000000000000000000000000170100016c8a652c7e321c7167a37b072cf33921f33531ee01000100915c55000000000000000000000000000000000000000000000000000000000000000000000000000010008850055e00fd5d02010001c47136edbccf65ed4e87e72ee8fc108fdde1cda9010002537f1ecbcecc1f0eca4b17260134a07c600bf7ef000000000000000000000000000000000000000000000000000000000000000080b506000000000019000000000000000d616c6c6f744561726e696e6773000309254e554c536436486755624d637a4238635051714e664551613177316e545538546143415241254e554c536436486765436e796b47534136694536396e4853654d615032505a555071315559254e554c536436486763634b5a4c524b46697541343864716235704534703537683177757037254e554c536436486767527a504c324e663832695574653837417942484236717936514d4377254e554c53643648676462386f367943465956527659745068514d7645706276564155774c38254e554c536436486762467657515568794b3679394e79555370643657413438366d4e6f7233254e554c53643648676a5135666f4b5276645973564a75734c61354b5963636d656245517973254e554c536436486765516152616e426e7a6e736454333552596a70537a4345464443566967254e554c536436486766623772564e644c3453744e42587533486f69654d674331316d6a774809093138363236333430330834363439333732350934363632333731353509333631353531363336093130343830333634360a3332373135373439333609363632393331363531083535363033323138093436353637373839380906313134313230053238343838063238353637320632323135323005363432303007323030343634380634303632303005333430353606323835333336480117010001c47136edbccf65ed4e87e72ee8fc108fdde1cda9010001002040a9000000000000000000000000000000000000000000000000000000000008fa878eb746e5bd3300006a2103728fbdd68ad3259e5f50d9ae0d5e553a01e8cbaf5b58703082e79bbea3a41e1a473045022100ee079a7e7c630e18dde1205fd350181505fedf0bd354a06eef25526f33302b390220793f2fdcbacdf618cecfeeaf90fcb96c00f5fcc45ff94f11b93d599282f7196513009250055e000046000117010001c47136edbccf65ed4e87e72ee8fc108fdde1cda90100010080e8370000000000000000000000000000000000000000000000000000000000000000000000000000"
	bytes, _ := hex.DecodeString(blockHex)
	block := ParseBlock(bytes)
	wantHash := "aa65f5aa4a6adc8ba16a01fd3855f867230f514c0066eda13f8bff5175daf9fb"

	got := hex.EncodeToString(block.Serialize())
	if got != blockHex {
		t.Errorf("block serialize failed.")
	}
	gotHash := block.Header.GetHash().String()
	if gotHash != wantHash {
		t.Errorf("block hash wrong.")
	}
}
